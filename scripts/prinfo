#!/bin/bash
set -e

# Check for --echo flag
echo_flag=false
if [[ "$1" == "--echo" ]]; then
    echo_flag=true
fi

# Check if we're in a git repository
if ! $(git_is_repo); then
    echo "Error: Not in a git repository"
    exit 1
fi

# Get current branch
echo "Getting current branch..." >&2
current_branch=$(git_branch_name)
if [ -z "$current_branch" ]; then
    echo "Error: Could not determine current branch"
    exit 1
fi

# Check if PR exists for current branch
echo "Checking for PR on branch '$current_branch'..." >&2
if ! gh pr view "$current_branch" >/dev/null 2>&1; then
    echo "Error: No PR found for branch '$current_branch'"
    exit 1
fi

# Start building the output
output=""

# Add branch name
output+="Branch: $current_branch"
output+="\n\n"

# Get PR description
echo "Fetching PR description..." >&2
pr_description=$(gh pr view "$current_branch" --json body --jq '.body')
output+="PR Description:\n"
output+="===============\n"
output+="$pr_description"
output+="\n\n"

# Get changed files
echo "Getting changed files..." >&2
changed_files=$(gh pr view "$current_branch" --json files --jq '.files[].path')
output+="Changed Files:\n"
output+="==============\n"
if [ -n "$changed_files" ]; then
    while IFS= read -r file; do
        output+="- $file\n"
    done <<< "$changed_files"
else
    output+="No changed files found\n"
fi
output+="\n"

# Get PR comments and conversations
echo "Fetching PR comments and reviews..." >&2
comments_output=$(gh pr view "$current_branch" --json comments,reviews --jq '
{
  comments: .comments | map({
    author: .author.login,
    body: .body,
    created: .createdAt
  }),
  reviews: .reviews | map({
    author: .author.login,
    state: .state,
    body: .body,
    created: .createdAt
  })
}')

# Parse and format comments
output+="Comments & Conversations:\n"
output+="========================\n"

# Get regular comments
regular_comments=$(echo "$comments_output" | jq -r '.comments[] | "[@\(.author)] (\(.created | split("T")[0])): \(.body)"' 2>/dev/null || echo "")
if [ -n "$regular_comments" ] && [ "$regular_comments" != "null" ]; then
    output+="Comments:\n"
    output+="$regular_comments"
    output+="\n\n"
fi

# Get review comments
review_comments=$(echo "$comments_output" | jq -r '.reviews[] | "[@\(.author)] Review: \(.state) (\(.created | split("T")[0]))\(.body | if length > 0 then ": \(.)" else "" end)"' 2>/dev/null || echo "")
if [ -n "$review_comments" ] && [ "$review_comments" != "null" ]; then
    output+="Reviews:\n"
    output+="$review_comments"
    output+="\n"
fi

# Get conversation threads (review comments on specific lines)
echo "Fetching line-specific comments..." >&2
pr_number=$(gh pr view "$current_branch" --json number --jq '.number')
conversation_data=$(gh api "repos/:owner/:repo/pulls/$pr_number/comments" --jq 'group_by(.path, .line // .original_line // 0) | map({
  file: .[0].path,
  line: (.[0].line // .[0].original_line // 0),
  diff_hunk: .[0].diff_hunk,
  comments: map({
    author: .user.login,
    body: .body,
    created: .created_at,
    in_reply_to: .in_reply_to_id
  })
})' 2>/dev/null || echo "[]")

if [ -n "$conversation_data" ] && [ "$conversation_data" != "[]" ] && [ "$conversation_data" != "null" ]; then
    output+="Conversation Threads:\n"
    output+="====================\n"
    
    # Process each conversation thread
    while IFS= read -r thread; do
        if [ -n "$thread" ] && [ "$thread" != "null" ]; then
            file=$(echo "$thread" | jq -r '.file')
            line=$(echo "$thread" | jq -r '.line')
            diff_hunk=$(echo "$thread" | jq -r '.diff_hunk // ""')
            
            # Add thread header
            if [ "$line" != "0" ] && [ "$line" != "null" ]; then
                output+="üìÅ $file (line $line):\n"
            else
                output+="üìÅ $file (general):\n"
            fi
            
            # Show a snippet of the diff context if available
            if [ -n "$diff_hunk" ] && [ "$diff_hunk" != "null" ] && [ "$diff_hunk" != "" ]; then
                # Extract the relevant line from diff hunk (first few lines for context)
                context_lines=$(echo "$diff_hunk" | head -n 3 | sed 's/^/  ‚îÇ /')
                if [ -n "$context_lines" ]; then
                    output+="  Context:\n$context_lines\n"
                fi
            fi
            
            # Add comments in chronological order
            comments=$(echo "$thread" | jq -r '.comments | sort_by(.created) | .[] | "  üí¨ @\(.author) (\(.created | split("T")[0])): \(.body)"')
            if [ -n "$comments" ]; then
                output+="$comments\n"
            fi
            output+="\n"
        fi
    done <<< "$(echo "$conversation_data" | jq -c '.[]')"
else
    output+="Conversation Threads:\n"
    output+="====================\n"
    output+="No line-specific conversation threads found\n"
fi

if [ -z "$regular_comments$review_comments" ] || [[ "$regular_comments$review_comments" == *"null"* ]]; then
    if [ "$conversation_data" = "[]" ] || [ "$conversation_data" = "null" ] || [ -z "$conversation_data" ]; then
        output+="No comments or conversations found\n"
    fi
fi

# Output the result
echo "Preparing output..." >&2
if [[ "$OSTYPE" == "darwin"* ]] && [ "$echo_flag" = false ]; then
    # On macOS and no --echo flag, copy to clipboard
    echo -e "$output" | pbcopy
    echo "PR information copied to clipboard"
else
    # Echo to stdout
    echo -e "$output"
fi
