#!/usr/bin/env bash

# Print usage if no arguments provided
if [ $# -eq 0 ]; then
    echo "Usage: find-bad-commit [--max-commits=N] COMMAND"
    echo
    echo "Example: find-bad-commit 'npm i && npm run lint'"
    echo "Example: find-bad-commit --max-commits=100 'npm i && npm run lint'"
    exit 1
fi

# Parse the max-commits argument and command
max_commits=""
command=""

for arg in "$@"; do
    if [[ $arg =~ ^--max-commits=([0-9]+)$ ]]; then
        max_commits="${BASH_REMATCH[1]}"
    else
        if [ -z "$command" ]; then
            command="$arg"
        else
            command="$command $arg"
        fi
    fi
done

# Validate command
if [ -z "$command" ]; then
    echo "Error: command is required"
    echo
    echo "Example: find-bad-commit 'npm i && npm run lint'"
    echo "Example: find-bad-commit --max-commits=100 'npm i && npm run lint'"
    exit 1
fi

# Prompt for max_commits if not provided
if [ -z "$max_commits" ]; then
    read -p "Enter maximum number of commits to check [100]: " max_commits
    max_commits=${max_commits:-100}
fi

# Print command in a distinctive way
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔍 Testing command:"
echo "   $command"
echo "   Over the last $max_commits commits"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo

# Test HEAD first - it should fail
echo "Testing current HEAD (should fail)..."
if ! eval "$command"; then
    echo "✓ Current HEAD fails as expected"
else
    echo "❌ Error: The current HEAD passes the test!"
    echo "    The bisect cannot continue since there's no failure to find."
    exit 1
fi

# Test oldest commit - it should succeed
echo -e "\nTesting oldest commit (HEAD~$max_commits, should pass)..."
git checkout -q HEAD~"$max_commits"
if eval "$command"; then
    echo "✓ Oldest commit passes as expected"
    git checkout -q -
else
    echo "❌ Error: The oldest commit (HEAD~$max_commits) fails the test!"
    echo "    The bisect cannot continue since there's no working state to find."
    git checkout -q -
    exit 1
fi

# Run git bisect
git bisect start && \
git bisect bad HEAD && \
git bisect good HEAD~"$max_commits" && \
git bisect run sh -c "$command"


# Print the commit that broke the command
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔥 Bad commit:"
bad_commit=$(git bisect log | tail -n 1 | grep -o '[a-f0-9]\{40\}')
echo "$bad_commit"
echo
echo "To check out this commit, run:"
echo "git checkout $bad_commit"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Clean up bisect and return to original commit
git bisect reset

# Ask if the user wants to checkout the bad commit. Default is yes.
read -p "Do you want to checkout the bad commit? (Y/n): " checkout_bad_commit
checkout_bad_commit=${checkout_bad_commit:-Y}
if [ "$checkout_bad_commit" = "Y" ]; then
    git checkout $bad_commit
fi
